{"version":3,"names":[],"mappings":"","sources":["Day-specs.js"],"sourcesContent":["/* eslint-env jasmine */\nimport moment from '../../bower_components/moment/src/moment.js';\nimport Day from '../../src/Day';\n\ndescribe('A Day class\\'s instance should', () => {\n  const title1 = 'Simple title1';\n  const title2 = 'Simple title3';\n  const title3 = 'Simple title2';\n  const event1 = {\n    id: '12345',\n    title: title1,\n    start: '2016-04-25 09:00:00',\n    end: '2016-04-26 18:00:00',\n    tooltip: 'LOL',\n    classes: ['fl-mc-event-color-red'],\n    ordering: {\n      span: 1,\n      isPlaceholder: false,\n    },\n  };\n  const event2 = {\n    id: '2345',\n    title: title2,\n    start: '2016-04-27 09:00:00',\n    end: '2016-04-28 18:00:00',\n    tooltip: 'LOdsfL',\n    classes: ['fl-mc-event-color-green'],\n    ordering: {\n      span: 1,\n      isPlaceholder: false,\n    },\n  };\n  const event3 = {\n    id: '3456',\n    title: title3,\n    start: '2016-04-26 09:00:00',\n    end: '2016-04-27 18:00:00',\n    tooltip: 'LoooOL',\n    classes: ['fl-mc-event-color-blue'],\n    ordering: {\n      span: 1,\n      isPlaceholder: false,\n    },\n  };\n\n  let day;\n  const dayHeaderFormat = 'DD/MM/YYYY';\n  let headerClickSpy;\n\n  beforeEach((done) => {\n    headerClickSpy = jasmine.createSpy('spy');\n\n    const date = new Date();\n    const parentClass = 'super-class';\n    const config = {\n      dayHeaderFormat,\n    };\n    const callbacks = {\n      dayHeaderClick: headerClickSpy,\n    };\n    day = new Day(date, parentClass, config, callbacks);\n    done();\n  });\n  // ===================\n  // Presentation\n  // ===================\n  describe('create day element with', () => {\n    it('date title', () => {\n      expect(day.html.header).toBeDefined();\n      expect(day.html.container.querySelector('[class*=header]')).toBeDefined();\n    });\n    it('events space', () => {\n      expect(day.html.events).toBeDefined();\n      expect(day.html.container.querySelector('[class*=events]')).toBeDefined();\n    });\n  });\n\n  it('highlight the html element if it refers to the current day.', () => {\n    expect(day.html.events).toBeDefined();\n  });\n  it('show the specified date', () => {\n    day.setDate(new Date());\n    const diff = Math.abs(moment(day.html.header).diff(new Date(), 'days'));\n    expect(diff).toEqual(0);\n  });\n  it('show the date in the correct format', () => {\n    day.setDate(new Date());\n    const dayHeader = day.html.header.innerHTML;\n    const dateInCorrectFormat = moment().format(dayHeaderFormat);\n    expect(dayHeader).toEqual(dateInCorrectFormat);\n  });\n\n  // ===================\n  // Functionality\n  // ===================\n  it('change day when commanded to.', () => {\n    day.setDate(new Date());\n    const dayDate1 = moment(day.date).format(dayHeaderFormat);\n    day.setDate(moment().add(3, 'days'));\n    const dayDate2 = moment(day.date).format(dayHeaderFormat);\n    expect(dayDate1).not.toEqual(dayDate2);\n  });\n\n  it('trigger title click event when the title is clicked.', () => {\n    day.html.header.click();\n    expect(headerClickSpy).toHaveBeenCalled();\n  });\n\n  it('create events correctly', () => {\n    const eventGroup = [event1, event2, event3];\n    day.setEvents(eventGroup);\n    expect(day.events.length).toEqual(3);\n    expect(day.events[0].html.title.innerHTML).toEqual(title1);\n    expect(day.events[1].html.title.innerHTML).toEqual(title2);\n    expect(day.events[2].html.title.innerHTML).toEqual(title3);\n\n    // Check that events were added to the HTML\n    expect(day.html.events.children.length).toEqual(3);\n    expect(day.html.events.children[0].innerHTML).toContain(title1);\n    expect(day.html.events.children[1].innerHTML).toContain(title2);\n    expect(day.html.events.children[2].innerHTML).toContain(title3);\n  });\n\n  it('update events correctly', () => {\n    const eventGroup1 = [event1, event2];\n    day.setEvents(eventGroup1);\n    const eventGroup2 = [event3];\n    day.setEvents(eventGroup2);\n    expect(day.events.length).toEqual(1);\n    expect(day.events[0].html.title.innerHTML).toEqual(title3);\n\n    // Check that events were added to the HTML\n    expect(day.html.events.children.length).toEqual(1);\n    expect(day.html.events.children[0].innerHTML).toContain(title3);\n  });\n\n  it('update all events on date change', () => {\n    const eventGroup1 = [event1, event2];\n    day.setEvents(eventGroup1);\n    day.setDate(moment().add(2, 'days'));\n    expect(day.events.length).toEqual(0);\n    expect(day.html.events.children.length).toEqual(0);\n  });\n\n\n  it('clear all events when requested', () => {\n    const eventGroup1 = [event1, event2];\n    day.setEvents(eventGroup1);\n    day.clearEvents();\n    expect(day.events.length).toEqual(0);\n    expect(day.html.events.children.length).toEqual(0);\n  });\n\n  it('not change HTML if setEvents is called with the same events as last call.', () => {\n    const eventGroup1 = [event1, event2];\n    day.setEvents(eventGroup1);\n    const eventElBefore1 = day.html.events.children[0];\n    const eventElBefore2 = day.html.events.children[1];\n\n    day.setEvents(eventGroup1);\n    const eventElAfter1 = day.html.events.children[0];\n    const eventElAfter2 = day.html.events.children[1];\n    expect(eventElBefore1).toEqual(eventElAfter1);\n    expect(eventElBefore2).toEqual(eventElAfter2);\n  });\n\n  it('add new Event without deleting other ones that should stay.', () => {\n    const eventGroup1 = [event1];\n    day.setEvents(eventGroup1);\n    const eventElBefore1 = day.html.events.children[0];\n\n    const eventGroup2 = [event1, event2];\n    day.setEvents(eventGroup2);\n    const eventElAfter1 = day.html.events.children[0];\n    expect(eventElBefore1).toEqual(eventElAfter1);\n    expect(day.events.length).toEqual(eventGroup2.length);\n  });\n\n  it('remove events that are not present in the new array of events configuration.', () => {\n    const eventGroup1 = [event1, event2];\n    day.setEvents(eventGroup1);\n    const eventElBefore1 = day.html.events.children[0];\n\n    const eventGroup2 = [event1];\n    day.setEvents(eventGroup2);\n    const eventElAfter1 = day.html.events.children[0];\n    expect(eventElBefore1).toEqual(eventElAfter1);\n    expect(day.events.length).toEqual(eventGroup2.length);\n    expect(day.html.events.children.length).toEqual(eventGroup2.length);\n  });\n});\n"],"file":"Day-specs.js","sourceRoot":"/source/"}