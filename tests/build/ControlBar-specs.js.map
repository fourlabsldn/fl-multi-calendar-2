{"version":3,"names":[],"mappings":"","sources":["ControlBar-specs.js"],"sourcesContent":["/* eslint-env jasmine */\nimport ControlBar from '../../src/ControlBar';\n\ndescribe('A ControlBar class\\'s instance should', () => {\n  // ===================\n  // Presentation\n  // ===================\n  let controlBar;\n  let controlBarEl;\n  let spy;\n  beforeAll(() => {\n    const parentClass = 'super-class';\n    const titleBarFormat = 'YYYY';\n    controlBar = new ControlBar(parentClass, titleBarFormat);\n    controlBarEl = controlBar.html.container;\n  });\n\n  beforeEach(() => {\n    spy = jasmine.createSpy('spy');\n  });\n\n  it('have a and backward forward button', () => {\n    expect(controlBar).toBeDefined();\n    expect(controlBar.html).toBeDefined();\n    expect(controlBar.html.container).toBeDefined();\n    const backBtn = controlBarEl.querySelector('[class*=-back]');\n    expect(backBtn).toBeDefined();\n\n    const forwardBtn = controlBarEl.querySelector('[class*=-forward]');\n    expect(forwardBtn).toBeDefined();\n  });\n\n  it('have a today button', () => {\n    const todayBtn = controlBarEl.querySelector('[class*=-today]');\n    expect(todayBtn).toBeDefined();\n  });\n\n  it('have a weekpicker', () => {\n    const datePicker = controlBarEl.querySelector('input[class*=-datePicker]');\n    expect(datePicker).toBeDefined();\n  });\n\n  it('have an update refresh', () => {\n    const refreshBtn = controlBarEl.querySelector('[class*=-refresh]');\n    expect(refreshBtn).toBeDefined();\n  });\n\n  it('have a title to put the calendar date', () => {\n    const titleBar = controlBarEl.querySelector('[class*=-titleBar]');\n    expect(titleBar).toBeDefined();\n  });\n\n  it('have a \"show weekends\" button', () => {\n    const showWeekendBtn = controlBarEl.querySelector('[class*=-show-weekend]');\n    expect(showWeekendBtn).toBeDefined();\n  });\n\n  // ===================\n  // Functionality\n  // ===================\n  it('emmit change correct event when forward button is pressed', () => {\n    controlBar.listenTo('forward', spy);\n    controlBar.html.forward.click();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('emmit change correct event when backward button is pressed', () => {\n    controlBar.listenTo('back', spy);\n    controlBar.html.back.click();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('emmit change correct event when today button is pressed', () => {\n    controlBar.listenTo('today', spy);\n    controlBar.html.today.click();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('emmit change correct event when \"show weekends\" button is pressed', () => {\n    controlBar.listenTo('show-weekend', spy);\n    controlBar.html['show-weekend'].click();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('emmit change correct event when refresh button is pressed', () => {\n    controlBar.listenTo('refresh', spy);\n    controlBar.html.refresh.click();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('emmit change correct event when the weekpicker is changed', () => {\n    controlBar.listenTo('datePicker', spy);\n    controlBar.html.datePicker.dispatchEvent(new CustomEvent('change'));\n    expect(spy).toHaveBeenCalled();\n  });\n\n  it('change title when an appropriate event is fired.', () => {\n    const titleBefore = controlBar.html.titleBar.innerHTML;\n    controlBar.setDate(new Date());\n    const titleAfter = controlBar.html.titleBar.innerHTML;\n    expect(titleBefore).not.toEqual(titleAfter);\n  });\n\n  it('handle invalid dates', () => {\n    expect(() => { controlBar.setDate(undefined); }).not.toThrow();\n    expect(() => { controlBar.setDate(null); }).not.toThrow();\n    expect(() => { controlBar.setDate(32); }).not.toThrow();\n  });\n});\n"],"file":"ControlBar-specs.js","sourceRoot":"/source/"}