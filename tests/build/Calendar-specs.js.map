{"version":3,"names":[],"mappings":"","sources":["Calendar-specs.js"],"sourcesContent":["/* eslint-env jasmine */\n\nimport Calendar from '../../src/Calendar';\n\ndescribe('An instance of the Calendar class should', () => {\n  const calendarName = 'Karl Marx';\n  const calendarDescription = 'Software Developer';\n  const calendarId = '12345';\n  const calendarConfig = {\n    calendarName,\n    calendarDescription,\n    calendarId,\n  };\n  const calendarStartDate = new Date();\n  const calendarParentClass = 'super-class';\n  const calendarCallbacks = {\n    titleClick: () => console.log('titleClick'),\n    dayHeaderClick: () => console.log('dayHeaderClick'),\n    eventClick: () => console.log('eventClick'),\n  };\n\n  describe('after instantiated', () => {\n    let calendar;\n    beforeAll(() => {\n      calendar = new Calendar(\n        calendarConfig,\n        calendarStartDate,\n        calendarParentClass,\n        calendarCallbacks\n      );\n    });\n\n    // ===================\n    // Presentation\n    // ===================\n    it('create a title element with the appropriate content form the config', () => {\n      expect(calendar.html).toBeDefined();\n      const calContainer = calendar.html.container;\n      expect(calContainer).toBeDefined();\n      expect(calContainer.innerHTML.indexOf(calendarName) > 0).toBeTruthy();\n      expect(calContainer.innerHTML.indexOf(calendarDescription) > 0).toBeTruthy();\n    });\n\n    it('create a container for day elements', () => {\n      const calContainer = calendar.html.container;\n      expect(calContainer.querySelector('[class*=\"days\"]') !== undefined).toBeTruthy();\n    });\n  });\n\n  // ===================\n  // Functionality\n  // ===================\n  it('throw an error when initialised without a config', () => {\n    expect(() => {\n      const newCalendar = new Calendar( // eslint-disable-line no-unused-vars\n        null,\n        calendarStartDate,\n        calendarParentClass,\n        calendarCallbacks\n      );\n    }).toThrow();\n  });\n\n  it('be instantiated without any days', () => {\n    const newCalendar = new Calendar( // eslint-disable-line no-unused-vars\n      calendarConfig,\n      calendarStartDate,\n      calendarParentClass,\n      calendarCallbacks\n    );\n\n    expect(newCalendar.getDayCount()).toEqual(0);\n  });\n\n  it('add the correct number of days when requested', () => {\n    const newCalendar = new Calendar( // eslint-disable-line no-unused-vars\n      calendarConfig,\n      calendarStartDate,\n      calendarParentClass,\n      calendarCallbacks\n    );\n\n    for (let i = 0; i < 10; i++) {\n      expect(newCalendar.getDayCount()).toEqual(i);\n      newCalendar.addDay();\n      expect(newCalendar.getDayCount()).toEqual(i + 1);\n    }\n  });\n\n  it('remove the correct number of days when requested', () => {\n    const newCalendar = new Calendar( // eslint-disable-line no-unused-vars\n      calendarConfig,\n      calendarStartDate,\n      calendarParentClass,\n      calendarCallbacks\n    );\n\n    const daysToBeAdded = 10;\n    for (let i = 0; i < daysToBeAdded; i++) {\n      newCalendar.addDay();\n    }\n    expect(newCalendar.getDayCount()).toEqual(daysToBeAdded);\n    for (let i = daysToBeAdded; i > 0; i++) {\n      newCalendar.removeDay();\n      expect(newCalendar.getDayCount()).toEqual(i - 1);\n    }\n  });\n\n  it('change the date of all days when start date is changed', () => {\n\n  });\n});\n"],"file":"Calendar-specs.js","sourceRoot":"/source/"}